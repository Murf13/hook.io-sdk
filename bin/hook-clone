#!/usr/bin/env node
var sdk = require("../");
var config = require(__dirname + '/../config');
var hook_private_key = "";
var hooks = require('microservice-examples');

var program = require('commander');

program
  .version('2.1.0')
  .option('-n, --name [string]', 'name of the hook', '')
  .option('-o, --owner [string]', 'owner of the hook');
  // .option('-u, --url [string]', 'url of the hook');

program.on('--help', function(){
  console.log('  Notes:');
  console.log('');
  console.log('    All commands are available as separate git style binaries');
  console.log('    Such as: hook-list, hook-info, hook-run, hook-deploy, etc');
  console.log('');
});

program.parse(process.argv);

if (program.name.length === 0) {
  var argv = require('minimist')(process.argv.slice(2));
  var serviceName = argv._[0] || "";
  if (serviceName.length > 0) {
    // parse serviceName to determine the string format
    // TODO: move to common lib
    // TODO: is the service an example hook with single name? if so, assume hook.io example service
    var parts = serviceName.split('/');
    if (parts.length === 1) {
      if (typeof hooks.services[parts[0]] === "object") {
        var example = hooks.services[parts[0]];
        program.name = example.name;
        program.owner = "examples"; // TODO: examples
      } else {
        console.log('Cannot find any services or example services with name: ' + parts[0])
        console.log('Perhaps try running: `hook-clone echo`');
        process.exit();
      }
      // single word, try exampples
    }
    // TODO: is the service a full url? if so, assume hook.io url
    // TOOD: is the service an /:owner/:hook format, if so assume hook.io owner / name pair
  } else {
    console.log('name parameter is required!')
    process.exit();
  }
}
// TODO: curry for alternate options such as name / url
// TODO: parse argv for name and owner
var client = sdk.createClient({
  hook_private_key: hook_private_key,
  host: config.host,
  port: config.port,
  protocol: config.protocol
});

var _service = {};
if (program.name.length > 0 && program.owner.length > 0) {
  _service.name = program.name;
  _service.owner = program.owner;
} else {
   var parts = serviceName.split('/');
   _service.name = parts[1];
   _service.owner = parts[0];
}

client.hook.clone({ name: _service.name, owner: _service.owner }, function (err, stat) {
  if (err) {
    console.log(err)
    return;
  }
  console.log('cloned ' + program.name + ' to ' + process.cwd() + '/' + _service.name);
});