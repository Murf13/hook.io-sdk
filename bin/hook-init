#!/usr/bin/env node

var path = require('path')
var helpers = require('../lib/helpers');
var fs = require('fs')
var examples = require('microcule-examples');
var prompt = require('mschema-prompt');
var config = require('../config');

var handlers = {
  'name' : {
     default: path.basename(process.cwd()),
     conform: function (val, cb) {
       cb(null, val);
     }
  },
  'version' : {
    default: '1.0.0',
    conform: function (val, cb) {
      cb(null, val);
    }
  },
  'description': {
    default: ""
  },
  'language' : {
    default: "javascript",
    // enum: ["javascript", "bash"],
    conform: function (val, cb) {
      // check against valid langs
      // TODO: add all langs / use mschema enum
      var langs = ["javascript", "bash", "babel"];
      if (langs.indexOf(val) === -1) {
        cb(new Error('Invalid option. Options include: \njavascript\nbash\nbabel'));
      } else {
        var _main = 'index' + helpers.extensions[val];
        handlers.main.default = _main;
        cb(null, val);
      }
    }
  },
  'main': {
    default: "index.js"
  },
  "license": {
    default: "MIT"
  }
}

prompt(handlers, complete);
function complete (err, data) {
  if (err) {
    // cancelled
    console.log(err);
    return;
  }
  data = data || {};
  data.scripts = {
    "start": "microcule .",
    // could use instead:
    "test": 'echo "no tests available"'
  }
  data.author = config.user;
  var example = examples.services[data.language + "-hello-world"];
  var _root = process.cwd();
  // TODO: add deps for stack
  // TODO: add any additional deps for language ( babel needs)
  data.dependencies = {
    "microcule": "4.x.x"
  };
  if (data.language === "babel") {
    data.dependencies['babel-core'] = "^6.16.0";
    data.dependencies['babel-plugin-syntax-async-functions'] = "^6.13.0";
    data.dependencies['babel-plugin-transform-regenerator'] = "^6.16.1";
    data.dependencies['babel-polyfill'] = "^6.16.0";
    data.dependencies['babel-preset-es2015'] = "^6.16.0";
    data.dependencies['babel-preset-stage-3'] = "^6.16.0";
  }
  // TODO: write sources based on example properties
  fs.writeFileSync(_root + "/" + data.main, example.source);
  fs.writeFileSync(_root + "/package.json", JSON.stringify(data, true, 2));
  console.log('Created new microservice!');
  // TODO: automated npm install?
  console.log('run: `npm install`');
  console.log('then: `npm start`');
  console.log('You can also try running `hook-deploy to push service to cloud`');
  process.exit();
};

/*

var argv = require('minimist')(process.argv.slice(2));
var _root = argv._[0] || process.cwd();

// create root if it doesnt already exist
mkdirp.sync(_root);

// write service source code file
// TODO: is source actually code property?
fs.writeFileSync(_root + "/service.sh", _service.source);

// write service schema file
fs.writeFileSync(_root + "/schema.js", 'module.exports = ' + JSON.stringify(_service.schema, true, 2));

// write service view file
fs.writeFileSync(_root + "/view.html", _service.view);

// write package.json file
fs.writeFileSync(_root + "/package.json", JSON.stringify(pkg, true, 2));

*/