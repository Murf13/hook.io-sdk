#!/usr/local/bin/node
var sdk = require("../");
var config = require('../config');
var hook_private_key = "";

if (typeof process.env.hook_private_key !== "undefined") {
  hook_private_key =  process.env.hook_private_key;
}

if (typeof process.env.hook_host !== "undefined") {
  config.host = process.env.hook_host;
}

if (typeof process.env.hook_port !== "undefined") {
  config.port =  Number(process.env.hook_port);
}

if (typeof process.env.hook_protocol !== "undefined") {
  config.protocol =  process.env.hook_protocol;
}

var client = sdk.createClient({
  hook_private_key: hook_private_key,
  host: config.host,
  port: config.port,
  protocol: config.protocol
});

var request = require('request');
var colors = require('colors');

var argv = require('minimist')(process.argv.slice(2));

var targetUrl = argv._[0] || "marak/echo";
//console.log(targetUrl)

// STDIN / REQUEST OUT stream processing
process.stdin.setEncoding('utf8');

// console.log('opening stream to ', url);

function makeRequest (chunk) {
  //var url = "http://hook.io/" + targetUrl;
  client.hook.run(targetUrl, { body: chunk }, function(err, res){
    if (err) {
      console.log(err);
      process.exit(1);
    }
    console.log(res);
    process.exit(0);
  });
};

if (process.stdin.isTTY) {
  // handle regular command
  makeRequest();
} else {
  // handle piped content
  process.stdin.on('readable', function() {
    console.log("READING".red)
    var chunk = process.stdin.read();
    if (chunk !== null) {
      //console.log(chunk);
      makeRequest(chunk)
    }
  });
  process.stdin.on('end', function() {
    //console.log('ended event stdin')
    // check if any data was recevived via stdin, if not, send json payload
    //process.stdout.write('end');
    //stream.end();
  });
}